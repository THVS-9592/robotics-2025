// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this proj

package frc.robot;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.CvSink;
import edu.wpi.first.cscore.CvSource;
import edu.wpi.first.cscore.UsbCamera;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Solenoid;

import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;

import com.kauailabs.navx.frc.*;

import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.can.*;

public class Robot extends TimedRobot 
{
  // Declare controllers and timer

  private XboxController controller;
  private XboxController operator;

  private final Timer m_timer = new Timer();

  // Declare solenoid

  private final DoubleSolenoid m_doubleSolenoid =
      new DoubleSolenoid(PneumaticsModuleType.REVPH, 1, 0);

  // Declare motors

  WPI_TalonSRX talonLeftLeader = new WPI_TalonSRX(1);
  WPI_TalonSRX talonLeftFollower = new WPI_TalonSRX(3);

  WPI_TalonSRX talonRightLeader = new WPI_TalonSRX(2);
  WPI_TalonSRX talonRightFollower = new WPI_TalonSRX(4);

  WPI_TalonSRX talonTopWheel = new WPI_TalonSRX(5);
  WPI_TalonSRX talonBottomWheel = new WPI_TalonSRX(6);

  // Declare drivetrain

  DifferentialDrive drivetrain = new DifferentialDrive(talonLeftLeader, talonRightLeader);

  // Declare gyroscope

  AHRS gyroscope = new AHRS(SPI.Port.kMXP);

  // Set variables to default, these should probably be booleans

  double kP2 = 1;
  double kP = 0.05;
  int shoot = 0;
  int reverse = 0;
  int low = 0;
  int restart = 0;
  String fresh = "Mr.Fresh";
  int reversed = 0;

  Thread m_visionThread;

  public void robotInit() 
  {
    m_visionThread =
      new Thread(
        () -> {
          UsbCamera camera = CameraServer.startAutomaticCapture();
          camera.setResolution(320, 240);

          CvSink cvSink = CameraServer.getVideo();
          CvSource outputStream = CameraServer.putVideo("Rectangle", 320, 240);

          Mat mat = new Mat();

          while (!Thread.interrupted())
          {
            if(cvSink.grabFrame(mat) == 0)
            {
              outputStream.notifyError(cvSink.getError());
              continue;
            }
            Imgproc.rectangle(
              mat, new Point(50, 50), new Point(200, 200), new Scalar(255, 255, 255),5);
            outputStream.putFrame(mat);
          }
        
        });
    m_visionThread.setDaemon(true);
    m_visionThread.start();

    // Add a gyroscope to the Shuffleboard

    Shuffleboard.getTab("Gyro").add(gyroscope);
    
    controller = new XboxController(0);
    operator = new XboxController(1);
    talonLeftFollower.follow(talonLeftLeader);
    talonRightFollower.follow(talonRightLeader);

    // Invert the right side of the drivetrain, and make sure the left is not inverted

    talonLeftLeader.setInverted(false);
    talonRightLeader.setInverted(true);

    // Make the followers the same as their leaders

    talonLeftFollower.setInverted(InvertType.FollowMaster);
    talonRightFollower.setInverted(InvertType.FollowMaster);

    // Safeties are never on, but still set them to on at the start of the program

    talonRightLeader.setSafetyEnabled(true);
    talonRightFollower.setSafetyEnabled(true);

    talonLeftLeader.setSafetyEnabled(true);
    talonLeftFollower.setSafetyEnabled(true);

    drivetrain.setDeadband(0.03);

    //robot too fast for turning!! see what drivers think
    drivetrain.setMaxOutput(0.7);
  }

  public void teleopInit()
  {
    // Safeties make the robot yell in pain, turn them off

    talonRightLeader.setSafetyEnabled(false);
    talonRightFollower.setSafetyEnabled(false);

    talonLeftLeader.setSafetyEnabled(false);
    talonLeftFollower.setSafetyEnabled(false);

    drivetrain.setSafetyEnabled(false);

    // If the robot is facing the opposite direction from
    // where it woke up, set the "reversed" variable to 1
    // so turning is reversed

/*  if(gyroscope.getYaw() < -90 || gyroscope.getAngle() > 90)
    {
      reversed = 1;
      System.out.println("reversed");
    }
    else
    {
      reversed = 0;
      System.out.println("not reversed");
     } */

    m_timer.restart();

    // Make sure variables are set to default

    shoot = 0;
    reverse = 0;
    low = 0;
    restart = 0;
    m_doubleSolenoid.set(DoubleSolenoid.Value.kReverse);
  }

  public void teleopPeriodic()
  {
    // Shoot with full power upon an A press

    if(operator.getAButton() || shoot == 1)
    {
      if (restart == 0)
      {
        m_timer.restart();
        restart = 1;
      }
      else
      {
        System.out.println(m_timer.get());
      }

      System.out.println("a pressed");
      System.out.println(talonBottomWheel.getMotorOutputPercent());
      shoot = 1;
      if(m_timer.get() <= 0.5)
      {
        talonTopWheel.set(1);
        talonBottomWheel.set(0);

        // current fix works, for now! use this if it stops working

        //try {
        //  System.out.println("waiting");
        //  wait(500);
        //} catch (InterruptedException e) {
        //  System.out.print("interrupted ");
        //  e.printStackTrace();
        //  System.out.println();
        //}
      }
      else if(m_timer.get() <= 1 && m_timer.get() > 0.5)
      {
        talonTopWheel.set(1);
        talonBottomWheel.set(1);
      }
      else
      {
        m_timer.restart();
        shoot = 0;
        restart = 0;
        talonBottomWheel.set(0);
        talonTopWheel.set(0);
      }
    }

    // Suck in the note for shooting upon a B press

    if(operator.getBButtonPressed() || reverse == 1)
    {
      if (restart == 0)
      {
        m_timer.restart();
        restart = 1;
      }
      else
      {
        System.out.println(m_timer.get());
      }

      System.out.println("b pressed");
      System.out.println(talonBottomWheel.getMotorOutputPercent());
      reverse = 1;
      if(m_timer.get() <= 1)
      {
        talonBottomWheel.set(-1);
        talonTopWheel.set(-1);
      }
      else
      {
        m_timer.restart();
        reverse = 0;
        restart = 0;
        talonBottomWheel.set(0);
        talonTopWheel.set(0);
      }
    }

    // Shoot the note at a lower power upon an X press

    if(operator.getXButtonPressed() || low == 1)
    {
      if (restart == 0)
      {
        m_timer.restart();
        restart = 1;
      }

      System.out.println("x pressed");
      System.out.println(talonBottomWheel.getMotorOutputPercent());
      low = 1;
      if(m_timer.get() <= 3)
      {
        talonTopWheel.set(0.28);
        talonBottomWheel.set(0.36);
      }
      else
      {
        m_timer.restart();
        low = 0;
        restart = 0;
        talonTopWheel.set(0);
        talonBottomWheel.set(0);
      }
    }

    if(operator.getYButton())
    {
      System.out.println(operator.getYButton());
      m_doubleSolenoid.toggle();
    }

    // Reverse steering if robot is facing opposite direction
    // from where it was turned on

    //if(reversed == 0)
    //{
      drivetrain.arcadeDrive(controller.getLeftY(), -controller.getRightX(), false);
    //}
    //else
    //{
    //  drivetrain.arcadeDrive(controller.getLeftY(), controller.getRightX(), true);
    //}
  }

  public void autonomousInit()
  {
    // Safeties make the robot yell in pain, turn them off

    talonRightLeader.setSafetyEnabled(false);
    talonRightFollower.setSafetyEnabled(false);

    talonLeftLeader.setSafetyEnabled(false);
    talonLeftFollower.setSafetyEnabled(false);

    drivetrain.setSafetyEnabled(false);
    
    m_timer.restart();
  }

  public void autonomousPeriodic()
  {
    // Find the heading error; setpoint is 90
    double error = 90 - gyroscope.getAngle();

    // Turns the robot to face the desired direction
    drivetrain.tankDrive(kP * error, -kP * error);

    if(m_timer.get() < 3)
    {

      error = -gyroscope.getRate();

      // Drives forward continuously at half speed, using the gyro to stabilize the heading
      drivetrain.tankDrive(.5 + kP2 * error, .5 - kP2 * error); 
    } if(fresh == "Mr. Fresh")
      {
        System.out.println("Hello world");
      } 
  }
}